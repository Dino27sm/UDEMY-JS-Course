'use strict';
//
/*
const Person = function (firstName, birthYear) {
  // Instance properties
  this.firstName = firstName;
  this.birthYear = birthYear;
};

const dino = new Person('Dino', 1997);
console.log(dino);

// ------ These 4 steps are done by "new" operator ---------
// 1. New empty object is created "{}"
// 2. function is called, "this" = {} - points to empty object created
// 3. {} linked to prototype
// 4. function automaticaly return "{}"

const matilda = new Person('Matilda', 1967);
const jack = new Person('Jack', 1972);

console.log(matilda, jack);

// console.log(dino instanceof Person);

// //============= PROTOTYPES ====================================
// //
// console.log(Person.prototype);

// Person.prototype.calcAge = function () {
//   console.log(2037 - this.birthYear);
//   // "this" points to the object which calls the function "calcAge"
// };

// dino.calcAge();
// matilda.calcAge();

// console.log(dino.__proto__);
// console.log(dino.__proto__ === Person.prototype);
// // Which means that "dino.__proto__" is the same as "Person.prototype"
// //
// console.log(Person.prototype.isPrototypeOf(dino));
// console.log(Person.prototype.isPrototypeOf(matilda));
// console.log(Person.prototype.isPrototypeOf(Person));
// // !!! "Person.prototype" is not a prototype of "Person" object.
// // It is a prototype of each object created by constructor function "Person"

// console.log(dino.__proto__.isPrototypeOf(dino));
// console.log(dino.__proto__.isPrototypeOf(matilda));

// // Defining properties in "Person.prototype"
// Person.prototype.species = 'I am Dino.';

// console.log(dino.__proto__.species);
// console.log(matilda.__proto__.species);
// console.log(jack.__proto__.species);
// // The property "species" is in each object's "prototype".
// // It is not a property of the object generated by constructor function.

// console.log('Has dino firstName? => ', dino.hasOwnProperty('firstName'));
// console.log('Has dino species? => ', dino.hasOwnProperty('species'));
// console.log(
//   'Has dino._proto_ species? => ',
//   dino.__proto__.hasOwnProperty('species')
// );
// //=============================================================
console.log('--------------------------------------');
// console.log(dino.__proto__);

// console.log(dino.__proto__.__proto__); // The top of prototype chain !!!
// console.log(dino.__proto__.__proto__.__proto__);

// console.log(Person.prototype);
// console.dir(Person.prototype.constructor);

const arr = [3, 4, 5, 4, 3, 2, 7, 2, 8, 9];
console.log(arr.length, arr);

console.dir(arr.__proto__);
console.dir(arr.__proto__.__proto__);

console.log(arr.__proto__ === Array.prototype);

Array.prototype.testUnique = function () {
  return [...new Set(this)]; // Returns an array
};
// In this way a function can be defined in "Array.prototype" and
// can be called from all arrays. THIS IS NOT RECOMMENDED !!!
console.log(arr.testUnique());
//==================================================================
//
//============== Coding CHALLENGE #1 ===============================
// 1. Constructor Function
const Car = function (make, speed) {
  this.make = make;
  this.speed = speed;
};
//    'BMW' going at 120 km/h
// 2. Implement an 'accelerate' method that will increase the speed by 10
Car.prototype.accelerate = function () {
  this.speed += 10;
  console.log(`${this.make} going at ${this.speed} km/h.`);
};

// 3. Implement a 'brake' method that will decrease the car's speed by 5
Car.prototype.brake = function () {
  this.speed -= 5;
  console.log(`${this.make} going at ${this.speed} km/h.`);
};

// 4. Create 2 'Car' objects - "BMW" and "Mercedes"
const bmw = new Car('BMW', 120);
const mercedes = new Car('Mercedes', 95);

console.log(bmw, mercedes);

console.log('------------- Accelerate ---------------------');
bmw.accelerate();
mercedes.accelerate();
bmw.accelerate();
mercedes.accelerate();
console.log(bmw, mercedes);

console.log('------------- Brake --------------------------');
bmw.brake();
mercedes.brake();
console.log(bmw, mercedes);
//================================================================
//
*/
//==================== ES6 CLASSES ===============================
// Class Expression
// const PersonCl = class {};

// Class Declaration
class PersonCl {
  constructor(firstName, birthYear) {
    this.firstName = firstName;
    this.birthYear = birthYear;
  }
}

const jessica = new PersonCl('Jessica', 1975);
console.log(jessica);
